{
    "Course": {
        "type": "struct",
        "errors": [],
        "status": "success"
    },
    "Student": {
        "type": "struct",
        "errors": [],
        "status": "success"
    },
    "printUsage": {
        "type": "function",
        "errors": [],
        "status": "success"
    },
    "updateStudentInfo": {
        "type": "function",
        "errors": [],
        "status": "success"
    },
    "main": {
        "type": "function",
        "errors": [
            {
                "type": "TEST_ERROR",
                "message": "Running tests...\n==================================================\n\u274c Test 24 failed!\n- Error: Invalid grade (must be between 0 and 100)\n+ Error: Invalid grade 105.000000 (must be between 0 and 100)\n?                     +++++++++++\n\n",
                "translation": "pub fn main() {\n    use std::env;\n    let args: Vec<String> = env::args().collect();\n    let argc = args.len();\n    if argc < 6 {\n        println!(\"Error: Insufficient arguments\");\n        print_usage();\n        std::process::exit(1);\n    }\n    let student_name = args[1].clone();\n    let age: i32 = match args[2].parse() {\n        Ok(n) if n > 0 && n <= 120 => n,\n        _ => {\n            println!(\"Error: Invalid age (must be between 1 and 120)\");\n            std::process::exit(1);\n        }\n    };\n    let course_name = args[3].clone();\n    let course_code: i32 = match args[4].parse() {\n        Ok(n) if n > 0 => n,\n        _ => {\n            println!(\"Error: Invalid course code\");\n            std::process::exit(1);\n        }\n    };\n    let num_grades = argc - 5;\n    let mut grades = Vec::with_capacity(num_grades);\n    for i in 0..num_grades {\n        let grade: f32 = match args[i + 5].parse() {\n            Ok(g) if g >= 0.0 && g <= 100.0 => g,\n            _ => {\n                println!(\"Error: Invalid grade (must be between 0 and 100)\");\n                std::process::exit(1);\n            }\n        };\n        grades.push(grade);\n    }\n    let course = Course {\n        course_name: course_name.clone(),\n        course_code,\n    };\n    let mut student = Student {\n        name: String::new(),\n        age: 0,\n        enrolled_course: Some(course),\n        grades,\n    };\n    update_student_info(&mut student, Some(&student_name), age);\n    println!(\"\\nStudent Information:\");\n    println!(\"------------------\");\n    println!(\"Name: {}\", student.name);\n    println!(\"Age: {}\", student.age);\n    if let Some(course) = &student.enrolled_course {\n        println!(\"Course: {} (Code: {})\", course.course_name, course.course_code);\n    }\n    print!(\"Grades: \");\n    for grade in &student.grades {\n        print!(\"{:.1} \", grade);\n    }\n    println!();\n    if !student.grades.is_empty() {\n        let sum: f32 = student.grades.iter().sum();\n        println!(\"Average Grade: {:.2}\", sum / student.grades.len() as f32);\n    }\n}\n"
            }
        ],
        "status": "success"
    }
}