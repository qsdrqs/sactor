# Generated by Claude 3.5

import subprocess
import sys
from typing import List, Tuple, Dict
import difflib

def generate_test_cases() -> List[Tuple[str, str]]:
    """Generate the test cases as command line arguments with their expected outputs."""
    valid_cases = [
        ('"John Doe" 20 "Computer Science" 101 85.5 92.0 88.5',
         """Student Information:
------------------
Name: John Doe
Age: 20
Course: Computer Science (Code: 101)
Grades: 85.5 92.0 88.5
Average Grade: 88.67"""),
        ('"Maria Garcia" 19 "Mathematics" 201 95.0 88.0 92.5 89.0',
         """Student Information:
------------------
Name: Maria Garcia
Age: 19
Course: Mathematics (Code: 201)
Grades: 95.0 88.0 92.5 89.0
Average Grade: 91.12"""),
        ('"Alex Smith" 22 "Physics" 301 78.5 82.0',
         """Student Information:
------------------
Name: Alex Smith
Age: 22
Course: Physics (Code: 301)
Grades: 78.5 82.0
Average Grade: 80.25"""),
        ('"Sarah Johnson" 21 "Chemistry" 401 90.0',
         """Student Information:
------------------
Name: Sarah Johnson
Age: 21
Course: Chemistry (Code: 401)
Grades: 90.0
Average Grade: 90.00"""),
        ('"James Wilson" 18 "Biology" 501 85.0 88.0 92.0 95.0 91.0',
         """Student Information:
------------------
Name: James Wilson
Age: 18
Course: Biology (Code: 501)
Grades: 85.0 88.0 92.0 95.0 91.0
Average Grade: 90.20"""),
        ('"Emma Brown" 23 "Engineering" 601 77.5 81.0 84.5',
         """Student Information:
------------------
Name: Emma Brown
Age: 23
Course: Engineering (Code: 601)
Grades: 77.5 81.0 84.5
Average Grade: 81.00"""),
        ('"David Lee" 20 "Data Science" 701 88.0 92.5 90.0 89.5',
         """Student Information:
------------------
Name: David Lee
Age: 20
Course: Data Science (Code: 701)
Grades: 88.0 92.5 90.0 89.5
Average Grade: 90.00"""),
        ('"Linda Martinez" 24 "Psychology" 801 95.5 93.0 91.0',
         """Student Information:
------------------
Name: Linda Martinez
Age: 24
Course: Psychology (Code: 801)
Grades: 95.5 93.0 91.0
Average Grade: 93.17"""),
        ('"Michael Zhang" 19 "Economics" 901 82.5 85.0 88.0',
         """Student Information:
------------------
Name: Michael Zhang
Age: 19
Course: Economics (Code: 901)
Grades: 82.5 85.0 88.0
Average Grade: 85.17"""),
        ('"Sophie Anderson" 22 "Art History" 151 88.0 91.5 87.0 93.0',
         """Student Information:
------------------
Name: Sophie Anderson
Age: 22
Course: Art History (Code: 151)
Grades: 88.0 91.5 87.0 93.0
Average Grade: 89.88"""),
        ('"Robert Taylor" 21 "Statistics" 251 79.0 83.5 81.0',
         """Student Information:
------------------
Name: Robert Taylor
Age: 21
Course: Statistics (Code: 251)
Grades: 79.0 83.5 81.0
Average Grade: 81.17"""),
        ('"Julia White" 20 "Literature" 351 92.5 95.0 90.0',
         """Student Information:
------------------
Name: Julia White
Age: 20
Course: Literature (Code: 351)
Grades: 92.5 95.0 90.0
Average Grade: 92.50"""),
        ('"Thomas Moore" 25 "Philosophy" 451 88.5 85.0 89.0 91.5',
         """Student Information:
------------------
Name: Thomas Moore
Age: 25
Course: Philosophy (Code: 451)
Grades: 88.5 85.0 89.0 91.5
Average Grade: 88.50"""),
        ('"Emily Chen" 18 "Music" 551 96.0 94.5 93.0',
         """Student Information:
------------------
Name: Emily Chen
Age: 18
Course: Music (Code: 551)
Grades: 96.0 94.5 93.0
Average Grade: 94.50"""),
        ('"Daniel Kim" 23 "Architecture" 651 87.5 89.0 92.0',
         """Student Information:
------------------
Name: Daniel Kim
Age: 23
Course: Architecture (Code: 651)
Grades: 87.5 89.0 92.0
Average Grade: 89.50"""),
        ('"Anna Kowalski" 22 "Sociology" 751 84.0 86.5 88.0 85.5',
         """Student Information:
------------------
Name: Anna Kowalski
Age: 22
Course: Sociology (Code: 751)
Grades: 84.0 86.5 88.0 85.5
Average Grade: 86.00"""),
        ('"Chris Patel" 20 "Anthropology" 851 91.0 88.5 93.0',
         """Student Information:
------------------
Name: Chris Patel
Age: 20
Course: Anthropology (Code: 851)
Grades: 91.0 88.5 93.0
Average Grade: 90.83"""),
        ('"Lisa Wong" 19 "Linguistics" 951 89.5 92.0 90.5',
         """Student Information:
------------------
Name: Lisa Wong
Age: 19
Course: Linguistics (Code: 951)
Grades: 89.5 92.0 90.5
Average Grade: 90.67"""),
        ('"Kevin O\'Brien" 21 "History" 111 86.0 83.5 87.0 89.0',
         """Student Information:
------------------
Name: Kevin O'Brien
Age: 21
Course: History (Code: 111)
Grades: 86.0 83.5 87.0 89.0
Average Grade: 86.38"""),
        ('"Rachel Green" 24 "Geography" 211 90.5 93.0 91.5',
         """Student Information:
------------------
Name: Rachel Green
Age: 24
Course: Geography (Code: 211)
Grades: 90.5 93.0 91.5
Average Grade: 91.67""")]

    invalid_cases = [
        ('"John Smith" 20 "Math"',
         """Error: Insufficient arguments
Usage: ./program <student_name> <age> <course_name> <course_code> <grade1> [grade2] [grade3] ...
Example: ./program "John Doe" 20 "Computer Science" 101 85.5 92.0 88.5"""),
        ('"Jane Doe" -5 "Physics" 301 88.0 92.0',
         "Error: Invalid age (must be between 1 and 120)"),
        ('"Bob Wilson" 150 "Chemistry" 401 85.0 90.0',
         "Error: Invalid age (must be between 1 and 120)"),
        ('"Alice Brown" 20 "Biology" -501 88.0 92.0',
         "Error: Invalid course code"),
        ('"Tom Davis" 22 "English" 601 105.0 95.0',
         "Error: Invalid grade 105.000000 (must be between 0 and 100)"),
        ('"Sara Miller" 19 "History" 701 85.0 -92.0',
         "Error: Invalid grade -92.000000 (must be between 0 and 100)"),
        ('"Mike Johnson" abc "Computer Science" 901 85.0',
         "Error: Invalid age (must be between 1 and 120)"),
        ('"Lucy Smith" 21 "Mathematics" xyz 88.0',
         "Error: Invalid course code"),
        ('"Peter Parker" 20 "Physics" 301 85.0 0.0 90.0',
         """Student Information:
------------------
Name: Peter Parker
Age: 20
Course: Physics (Code: 301)
Grades: 85.0 0.0 90.0
Average Grade: 58.33"""),
        ('"Peter Parker" 20 "Physics" 301 85.0 abc 90.0',
         """Student Information:
------------------
Name: Peter Parker
Age: 2
Course: Physics (Code: 301)
Grades: 85.0 0.0 90.0
Average Grade: 58.33""")]

    return valid_cases + invalid_cases

def normalize_output(output: str) -> str:
    """Normalize the output by removing extra whitespace and standardizing newlines."""
    return '\n'.join(line.strip() for line in output.strip().split('\n') if line.strip())

def run_test(program_path: str, test_case: str) -> str:
    """Run a single test case and return the output."""
    try:
        cmd = f"{program_path} {test_case}"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return normalize_output(result.stdout + result.stderr)
    except subprocess.SubprocessError as e:
        return f"Error running test: {e}"

def compare_outputs(actual: str, expected: str) -> Tuple[bool, str]:
    """Compare actual and expected outputs and return a tuple of (is_match, diff)."""
    if actual == expected:
        return True, ""

    # Generate a detailed diff
    differ = difflib.Differ()
    diff = list(differ.compare(actual.splitlines(), expected.splitlines()))
    diff_text = '\n'.join(diff)

    return False, diff_text

def run_all_tests(program_path: str) -> Tuple[bool, Dict[str, str]]:
    """
    Run all test cases and return a tuple of (all_passed, failed_tests_dict).
    failed_tests_dict maps test inputs to their diffs.
    """
    all_passed = True
    failed_tests = {}

    for test_input, expected_output in generate_test_cases():
        actual_output = run_test(program_path, test_input)
        matches, diff = compare_outputs(normalize_output(actual_output),
                                     normalize_output(expected_output))

        if not matches:
            all_passed = False
            failed_tests[test_input] = diff

    return all_passed, failed_tests

def run_one_test(program_path: str, test_number: int) -> Tuple[bool, str]:
    """Run a single test case and return a tuple of (is_passed, output)."""
    if test_number < 0 or test_number >= len(generate_test_cases()):
        raise ValueError(f"Invalid test number: {test_number}, must be between 0 and {len(generate_test_cases()) - 1}")
    test_input, expected_output = generate_test_cases()[test_number]
    actual_output = run_test(program_path, test_input)
    matches, diff = compare_outputs(normalize_output(actual_output),
                                 normalize_output(expected_output))
    return matches, diff

def main():
    if len(sys.argv) < 2 or len(sys.argv) > 3:
        print("Usage: python test_program.py <path_to_program> [test_number]")
        sys.exit(1)

    program_path = sys.argv[1]

    print("Running tests...")
    print("="*50)

    if len(sys.argv) == 2:
        all_passed, failed_tests = run_all_tests(program_path)
        if all_passed:
            print("✅ All tests passed successfully!")
            sys.exit(0)
        else:
            print(f"❌ {len(failed_tests)} test(s) failed!\n")
            for test_input, diff in failed_tests.items():
                print(f"Test case failed with input:")
                print(f"  {program_path} {test_input}")
                print("\nDiff:")
                print("-" * 40)
                print(diff)
                print("=" * 50 + "\n")
            sys.exit(1)

    elif len(sys.argv) == 3:
        test_number = int(sys.argv[2])
        is_passed, diff = run_one_test(program_path, test_number)
        if is_passed:
            print(f"✅ Test {test_number} passed successfully!")
            sys.exit(0)
        else:
            print(f"❌ Test {test_number} failed!")
            print(diff)
            sys.exit(1)


if __name__ == "__main__":
    main()
