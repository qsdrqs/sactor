{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "sactor://spec.schema.json",
  "title": "Sactor Idiomatic Translation Spec",
  "description": "Schema describing mappings between unidiomatic (repr(C)) Rust and idiomatic Rust for structs and function arguments.",
  "$defs": {
    "PtrShape": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ptr": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "kind": { "enum": ["slice", "cstring", "ref"] },
            "len_from": { "type": "string", "description": "Name of the unidiomatic length field." },
            "len_const": { "type": "integer", "minimum": 0, "description": "Constant element count for the pointer." },
            "null": { "enum": ["nullable", "forbidden"], "description": "Whether the pointer can be NULL." }
          },
          "required": ["kind"]
        }
      },
      "required": ["ptr"]
    },
    "UField": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "name": { "type": "string" },
        "type": { "type": "string" },
        "shape": {
          "oneOf": [
            { "const": "scalar", "description": "Scalar value (integer, float, bool, char, or any non-pointer data structures)" },
            { "$ref": "#/$defs/PtrShape", "description": "Pointer type (raw pointer, slice, or C string)" }
          ]
        }
      },
      "required": ["name", "shape"]
    },
    "IField": {
      "type": "object",
      "description": "Idiomatic-side field path. Special convention: if name == 'ret', this Field describes the function return mapping.",
      "additionalProperties": true,
      "properties": {
        "name": { "type": "string", "description": "Idiomatic field path or 'ret' for function return." },
        "type": { "type": "string" }
      },
      "required": ["name"]
    },
    "EnumDiscriminant": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "tag": { "type": "string", "description": "u_field.name of the discriminant/tag" },
        "equals": { "type": ["integer", "string"], "description": "Value of tag that selects this variant" }
      },
      "required": ["tag", "equals"]
    },
    "EnumVariant": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "name": { "type": "string", "description": "Idiomatic enum variant name" },
        "when": { "$ref": "#/$defs/EnumDiscriminant" },
        "payload": { "type": "array", "items": { "$ref": "#/$defs/Field" } }
      },
      "required": ["name", "when"]
    },
    "Field": {
      "type": "object",
      "description": "Field mapping between unidiomatic C-style field and idiomatic Rust path.",
      "properties": {
        "u_field": { "$ref": "#/$defs/UField" },
        "i_field": { "$ref": "#/$defs/IField" },
        "ownership": { "type": "string", "enum": ["owning", "transient"], "description": "Optional ownership hint." },
        "compare": {
          "type": "string",
          "enum": ["by_value", "by_slice", "skip"],
          "description": "Comparison strategy for roundtrip tests. Use 'skip' generously for values that may legitimately diverge (raw pointers, aliasing views, externally-owned buffers, handles, allocator state, etc.) so the automated selftest stays permissive."
        },
        "llm_note": { "type": "string", "description": "Free-form note for LLM when automatic codegen is insufficient (e.g., aliasing/offset semantics)." }
      },
      "required": ["u_field", "i_field"]
    },
    "StructSpec": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "version": { "type": "string" },
        "struct_name": { "type": "string" },
        "fields": { "type": "array", "items": { "$ref": "#/$defs/Field" }, "minItems": 1 },
        "i_kind": { "type": "string", "enum": ["struct", "enum"], "default": "struct" },
        "i_type": { "type": "string", "description": "Idiomatic type name (useful when i_kind=enum)" },
        "variants": { "type": "array", "items": { "$ref": "#/$defs/EnumVariant" } }
      },
      "required": ["fields"]
    },
    "FunctionSpec": {
      "type": "object",
      "description": "Function argument/return mapping. Return values are expressed via a Field whose i_field.name == 'ret'.",
      "additionalProperties": true,
      "properties": {
        "version": { "type": "string" },
        "function_name": { "type": "string" },
        "fields": { "type": "array", "items": { "$ref": "#/$defs/Field" }, "minItems": 1 }
      },
      "required": ["fields"]
    }
  },
  "oneOf": [
    { "$ref": "#/$defs/StructSpec" },
    { "$ref": "#/$defs/FunctionSpec" }
  ]
}
